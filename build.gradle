buildscript {
    dependencies {
        classpath "net.masterthought:cucumber-reporting:3.8.0"
        classpath "commons-io:commons-io:2.5"
    }
}

plugins {
    id 'java'
}

ext {
    karateVersion = "0.9.6"
    jacksonVersion = "2.9.8"
}

version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    maven { url "https://jitpack.io" }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testImplementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    testImplementation "com.google.code.gson:gson:2.8.1"
    testImplementation "org.redisson:redisson:2.12.3"
    testImplementation "net.spy:spymemcached:2.12.3"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.4.2"
    testImplementation "com.intuit.karate:karate-junit5:${karateVersion}"
    testImplementation "com.intuit.karate:karate-apache:${karateVersion}"
    testImplementation "com.intuit.karate:karate-gatling:${karateVersion}"
    testImplementation "net.masterthought:cucumber-reporting:3.8.0"
    testImplementation "com.github.seratch:jslack:2.1.1"
    testImplementation "net.lingala.zip4j:zip4j:2.6.1"
    compile group: 'org.json', name: 'json', version: '20190722'
    compile group: 'org.everit.json', name: 'org.everit.json.schema', version: '1.5.1'
//    compile group: 'com.github.javafaker', name: 'javafaker', version: '1.0.2'
    implementation 'com.github.Arkni:json-to-csv:6057d41ae9'

    testImplementation "io.github.cdimascio:dotenv-java:2.2.0"
}

sourceSets {
    test {
        resources {
            srcDir file('src/test/java')
            exclude '**/*.java'
        }
    }
}

compileTestJava {
    options.compilerArgs += '-proc:none'
}

task testReport {
    doLast {
        println "Generating Karate reports..."
        println "Report is generated at file://$buildDir/cucumber-html-reports/overview-features.html"
    }
}

task loadtestRun(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = "io.gatling.app.Gatling"
    doFirst {
        group = 'Web Tests'
        description = 'Run Gatling Tests'
        println "Running simulation [${SIM_NAME}]"
        new File("${buildDir}/reports/gatling").mkdirs()
        args = [
                '-s', "${SIM_NAME}",
                '-rf', "${buildDir}/reports/gatling"
        ]
        //  systemProperty "karate.options", System.getProperty("karate.options")
        systemProperties System.properties
    }
}

test {
    useJUnitPlatform()
    // pull karate env into the runtime
    if (!project.hasProperty('karate.env')) {
        systemProperty "karate.env", "stg"
    }
    systemProperties System.properties
    outputs.upToDateWhen { false }
    finalizedBy(testReport)
    testLogging {
        showStandardStreams = true
    }
}

task karateDebug(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = 'com.intuit.karate.cli.Main'
}

tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors()
}
